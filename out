
GRIT/Plugin.hs:373:1: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In an equation for ‘solveOnlyIf’: solveOnlyIf _ _ ct = ...
    |
373 | solveOnlyIf _ _ ct = wontSolve ct
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Test.hs:93:8: warning:
    Defaulting ‘l :: Length’ to ‘'Unknown’ in ‘[b] ~ Vec l b’!
   |
93 | vmap = map
   |        ^^^

Test.hs:93:8: warning:
    Defaulting ‘l :: Length’ to ‘'Unknown’ in ‘Vec l a ~ [a]’!
   |
93 | vmap = map
   |        ^^^

Test.hs:107:12: warning:
    Defaulting ‘l :: Length’ to ‘'Unknown’ in ‘l ~ 'Unknown’!
    |
107 | forget a = a
    |            ^

Test.hs:113:29: warning:
    Defaulting ‘length0 :: Length’ to ‘'Unknown’ in ‘Inc length0
                                                     ~ 'AtLeast n0’!
    |
113 |           print $ safeHead ((7 :: Int)>:xs)
    |                             ^^^^^^^^^^^^^^

Test.hs:113:41: warning:
    Defaulting ‘length0 :: Length’ to ‘'Unknown’ in ‘[Int]
                                                     ~ Vec length0 Int’!
    |
113 |           print $ safeHead ((7 :: Int)>:xs)
    |                                         ^^

Test.hs:114:29: warning:
    Defaulting ‘length0 :: Length’ to ‘'Unknown’ in ‘Inc length0
                                                     ~ 'AtLeast n0’!
    |
114 |           print $ safeTail ((2 :: Int)>:xs)
    |                             ^^^^^^^^^^^^^^

Test.hs:114:41: warning:
    Defaulting ‘length0 :: Length’ to ‘'Unknown’ in ‘[Int]
                                                     ~ Vec length0 Int’!
    |
114 |           print $ safeTail ((2 :: Int)>:xs)
    |                                         ^^

Test.hs:115:32: warning:
    Defaulting ‘length0 :: Length’ to ‘'Unknown’ in ‘[Int]
                                                     ~ Vec length0 Int’!
    |
115 |           let k = ((2 :: Int)>:xs)
    |                                ^^

Test.hs:116:38: warning:
    Defaulting ‘length0 :: Length’ to ‘'Unknown’ in ‘Vec
                                                       (Inc length0) Int
                                                     ~ [Int]’!
    |
116 |               mk = map (+ (1:: Int)) k
    |                                      ^

Test.hs:93:8: error:
    • Couldn't match type ‘msg7’
                     with ‘Msg
                             (((('Text "Automatic promotion of '" ':<>: 'ShowType [b])
                                ':<>: 'Text "' to a '")
                               ':<>: 'ShowType (Vec 'Unknown b))
                              ':<>: 'Text "'!")’
        because type variable ‘b’ would escape its scope
      This (rigid, skolem) type variable is bound by
        the type signature for:
          vmap :: forall a b (l :: Length). (a -> b) -> Vec l a -> Vec l b
        at Test.hs:92:1-38
      Expected type: (a -> b) -> Vec l a -> Vec l b
        Actual type: (a -> b) -> [a] -> [b]
    • In the expression: map
      In an equation for ‘vmap’: vmap = map
    • Relevant bindings include
        vmap :: (a -> b) -> Vec l a -> Vec l b (bound at Test.hs:93:1)
   |
93 | vmap = map
   |        ^^^

Test.hs:115:32: error:
    • Couldn't match type ‘msg1’
                     with ‘Msg
                             (((('Text "Automatic promotion of '" ':<>: 'ShowType [Int])
                                ':<>: 'Text "' to a '")
                               ':<>: 'ShowType (Vec 'Unknown Int))
                              ':<>: 'Text "'!")’
      Expected type: Vec 'Unknown Int
        Actual type: [Int]
    • In the second argument of ‘(>:)’, namely ‘xs’
      In the expression: ((2 :: Int) >: xs)
      In an equation for ‘k’: k = ((2 :: Int) >: xs)
    |
115 |           let k = ((2 :: Int)>:xs)
    |                                ^^

Test.hs:116:38: error:
    • Couldn't match type ‘msg4’
                     with ‘Msg
                             (((('Text "Automatic promotion of '"
                                 ':<>: 'ShowType (Vec ('AtLeast 1) Int))
                                ':<>: 'Text "' to a '")
                               ':<>: 'ShowType [Int])
                              ':<>: 'Text "'!")’
      Expected type: [Int]
        Actual type: Vec (Inc 'Unknown) Int
    • In the second argument of ‘map’, namely ‘k’
      In the expression: map (+ (1 :: Int)) k
      In an equation for ‘mk’: mk = map (+ (1 :: Int)) k
    |
116 |               mk = map (+ (1:: Int)) k
    |                                      ^

Test.hs:126:18: error:
    • Couldn't match type ‘msg0’
                     with ‘Msg
                             ((('Text "AtLeast " ':<>: 'ShowType 2) ':<>: 'Text " is at least ")
                              ':<>: 'ShowType 2)’
        arising from a use of ‘safe2H’
    • In the first argument of ‘print’, namely ‘(safe2H n2)’
      In a stmt of a 'do' block: print (safe2H n2)
      In the expression:
        do print "Enter a list of numbers!"
           xs <- read @[Int] <$> return "[1,3,5]"
           print $ safeHead ((7 :: Int) >: xs)
           print $ safeTail ((2 :: Int) >: xs)
           ....
    |
126 |           print (safe2H n2)
    |                  ^^^^^^^^^

Test.hs:127:18: error:
    • Couldn't match type ‘msg6’
                     with ‘Msg
                             ((('Text "AtLeast " ':<>: 'ShowType 2) ':<>: 'Text " is at least ")
                              ':<>: 'ShowType 4)’
        arising from a use of ‘safe2H’
    • In the first argument of ‘print’, namely ‘(safe2H n4)’
      In a stmt of a 'do' block: print (safe2H n4)
      In the expression:
        do print "Enter a list of numbers!"
           xs <- read @[Int] <$> return "[1,3,5]"
           print $ safeHead ((7 :: Int) >: xs)
           print $ safeTail ((2 :: Int) >: xs)
           ....
    |
127 |           print (safe2H n4)
    |                  ^^^^^^^^^

Test.hs:131:13: error:
    • Couldn't match type ‘msg5’
                     with ‘Msg
                             (((('Text "Automatic promotion of '" ':<>: 'ShowType [Bool])
                                ':<>: 'Text "' to a '")
                               ':<>: 'ShowType (Vec 'Unknown Bool))
                              ':<>: 'Text "'!")’
      Expected type: Vec 'Unknown Bool
        Actual type: [Bool]
    • In the pattern: [True, False]
      In a case alternative: [True, False] -> print "matched!"
      In a stmt of a 'do' block:
        case forget n2 of
          [True, False] -> print "matched!"
          _ -> print "didn't match"
    |
131 |             [True, False] -> print "matched!"
    |             ^^^^^^^^^^^^^
